20:22:07 完整请求
20:22:07 请求结束
20:22:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:22:07 path and query /api/todo/add {} {"title":"吃饭"}
20:22:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488975727,
  "id": 5,
  "completed": false,
  "title": "吃饭",
  "ut": 1488975727
}
20:24:01 完整请求
20:24:01 请求结束
20:24:01 完整请求
20:24:01 请求结束
20:24:01 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:24:01 path and query /todo/index {} 
20:24:01 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:24:01 完整请求
20:24:01 请求结束
20:24:01 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:24:01 path and query /static {'file': 'gua.js'} 
20:24:01 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
20:24:01 完整请求
20:24:01 请求结束
20:24:01 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:24:01 path and query /static {'file': 'todo.js'} 
20:24:01 响应
 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:24:01 完整请求
20:24:01 请求结束
20:24:02 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:24:02 path and query /api/todo/all {} 
20:24:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975133,
    "id": 3,
    "completed": false,
    "title": "吃瓜",
    "ut": 1488975133
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488975727,
    "id": 5,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975727
  }
]
20:24:15 完整请求
20:24:15 请求结束
20:24:15 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:24:15 path and query /api/todo/add {} {"title":"hello"}
20:24:15 响应
HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488975855,
  "id": 6,
  "completed": false,
  "title": "hello",
  "ut": 1488975855
}
20:26:52 完整请求
20:26:52 请求结束
20:26:52 完整请求
20:26:52 请求结束
20:26:52 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:26:52 path and query /api/todo/add {} {"title":"hello瓜"}
20:26:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488976012,
  "id": 7,
  "completed": false,
  "title": "hello瓜",
  "ut": 1488976012
}
20:29:00 完整请求
20:29:00 请求结束
20:31:03 完整请求
20:31:03 请求结束
20:31:03 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:31:03 path and query /api/todo/add {} {"title":"hello瓜"}
20:31:03 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488976263,
  "id": 8,
  "completed": false,
  "title": "hello瓜",
  "ut": 1488976263
}
20:31:22 完整请求
20:31:22 请求结束
20:33:07 完整请求
20:33:07 完整请求
20:33:07 完整请求
20:33:07 完整请求
20:33:07 完整请求
20:33:07 请求结束
20:33:07 请求结束
20:33:07 请求结束
20:33:07 请求结束
20:33:07 请求结束
20:33:07 完整请求
20:33:07 请求结束
20:33:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:07 path and query /todo/index {} 
20:33:07 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:33:07 完整请求
20:33:07 请求结束
20:33:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:07 path and query /todo/index {} 
20:33:07 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:33:07 完整请求
20:33:07 请求结束
20:33:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:07 path and query /static {'file': 'gua.js'} 
20:33:07 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
20:33:07 完整请求
20:33:07 请求结束
20:33:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:08 path and query /static {'file': 'todo.js'} 
20:33:08 响应
 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            todoCell.remove()
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:33:08 完整请求
20:33:08 请求结束
20:33:08 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:08 path and query /api/todo/all {} 
20:33:08 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975133,
    "id": 3,
    "completed": false,
    "title": "吃瓜",
    "ut": 1488975133
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488975727,
    "id": 5,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975727
  },
  {
    "ct": 1488975855,
    "id": 6,
    "completed": false,
    "title": "hello",
    "ut": 1488975855
  },
  {
    "ct": 1488976012,
    "id": 7,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976012
  },
  {
    "ct": 1488976263,
    "id": 8,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976263
  }
]
20:33:14 完整请求
20:33:14 请求结束
20:33:14 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:14 path and query /todo/index {} 
20:33:14 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:33:15 完整请求
20:33:15 完整请求
20:33:15 请求结束
20:33:15 请求结束
20:33:15 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:15 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:15 path and query /static {'file': 'gua.js'} 
20:33:15 path and query /static {'file': 'todo.js'} 
20:33:15 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
20:33:15 响应
 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            todoCell.remove()
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:33:15 完整请求
20:33:15 请求结束
20:33:15 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:15 path and query /api/todo/all {} 
20:33:15 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975133,
    "id": 3,
    "completed": false,
    "title": "吃瓜",
    "ut": 1488975133
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488975727,
    "id": 5,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975727
  },
  {
    "ct": 1488975855,
    "id": 6,
    "completed": false,
    "title": "hello",
    "ut": 1488975855
  },
  {
    "ct": 1488976012,
    "id": 7,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976012
  },
  {
    "ct": 1488976263,
    "id": 8,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976263
  }
]
20:39:22 完整请求
20:39:22 请求结束
20:39:22 完整请求
20:39:22 请求结束
20:39:22 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:22 path and query /todo/index {} 
20:39:22 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:39:22 完整请求
20:39:22 请求结束
20:39:22 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:22 path and query /static {'file': 'gua.js'} 
20:39:22 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:39:22 完整请求
20:39:22 请求结束
20:39:22 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:22 path and query /static {'file': 'todo.js'} 
20:39:22 响应
 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:39:23 完整请求
20:39:23 请求结束
20:39:23 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:23 path and query /api/todo/all {} 
20:39:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975133,
    "id": 3,
    "completed": false,
    "title": "吃瓜",
    "ut": 1488975133
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488975727,
    "id": 5,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975727
  },
  {
    "ct": 1488975855,
    "id": 6,
    "completed": false,
    "title": "hello",
    "ut": 1488975855
  },
  {
    "ct": 1488976012,
    "id": 7,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976012
  },
  {
    "ct": 1488976263,
    "id": 8,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976263
  }
]
20:39:44 完整请求
20:39:44 请求结束
20:39:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:44 path and query /todo/index {} 
20:39:44 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:39:44 完整请求
20:39:44 请求结束
20:39:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:44 path and query /static {'file': 'gua.js'} 
20:39:44 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:39:44 完整请求
20:39:44 请求结束
20:39:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:44 path and query /static {'file': 'todo.js'} 
20:39:44 响应
 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:39:44 完整请求
20:39:44 请求结束
20:39:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:44 path and query /api/todo/all {} 
20:39:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975133,
    "id": 3,
    "completed": false,
    "title": "吃瓜",
    "ut": 1488975133
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488976263,
    "id": 8,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976263
  }
]
20:39:58 完整请求
20:39:58 请求结束
20:39:58 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:58 path and query /api/todo/delete {'id': '3'} 
20:39:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488975133,
  "id": 3,
  "completed": false,
  "title": "吃瓜",
  "ut": 1488975133
}
20:41:06 完整请求
20:41:06 请求结束
20:41:06 完整请求
20:41:06 请求结束
20:41:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:41:06 path and query /api/todo/delete {'id': '8'} 
20:41:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488976263,
  "id": 8,
  "completed": false,
  "title": "hello瓜",
  "ut": 1488976263
}
20:43:55 完整请求
20:43:55 请求结束
20:43:56 完整请求
20:43:56 请求结束
20:43:56 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:43:56 path and query /todo/index {} 
20:43:56 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:43:56 完整请求
20:43:56 请求结束
20:43:56 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:43:56 path and query /static {'file': 'gua.js'} 
20:43:56 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:43:56 完整请求
20:43:56 请求结束
20:43:56 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:43:56 path and query /static {'file': 'todo.js'} 
20:43:56 响应
 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ct = todo.ct
    var ut = todo.ut
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ct}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:43:56 完整请求
20:43:56 请求结束
20:43:56 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:43:56 path and query /api/todo/all {} 
20:43:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  }
]
20:44:43 完整请求
20:44:43 请求结束
20:44:43 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:44:43 path and query /api/todo/add {} {"title":"123"}
20:44:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488977083,
  "id": 5,
  "completed": false,
  "title": "123",
  "ut": 1488977083
}
20:45:10 完整请求
20:45:10 请求结束
20:46:12 完整请求
20:46:12 请求结束
20:46:12 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:46:12 path and query /todo/index {} 
20:46:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:46:12 完整请求
20:46:12 请求结束
20:46:12 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:46:12 path and query /static {'file': 'gua.js'} 
20:46:12 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:46:12 完整请求
20:46:12 请求结束
20:46:13 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:46:13 path and query /static {'file': 'todo.js'} 
20:46:13 响应
 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ct = todo.ct
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
//    var ut = todo.ut
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ct}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:46:13 完整请求
20:46:13 请求结束
20:46:13 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:46:13 path and query /api/todo/all {} 
20:46:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  }
]
20:47:19 完整请求
20:47:19 请求结束
20:47:19 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:19 path and query /todo/index {} 
20:47:19 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:47:19 完整请求
20:47:19 请求结束
20:47:20 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:20 path and query /static {'file': 'gua.js'} 
20:47:20 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:47:20 完整请求
20:47:20 请求结束
20:47:20 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:20 path and query /static {'file': 'todo.js'} 
20:47:20 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var t = timeString(todo.ut)
//    var ut = todo.ut
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ct}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:47:20 完整请求
20:47:20 请求结束
20:47:20 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:20 path and query /api/todo/all {} 
20:47:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  }
]
20:47:38 完整请求
20:47:38 请求结束
20:47:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:38 path and query /todo/index {} 
20:47:38 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:47:38 完整请求
20:47:38 请求结束
20:47:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:38 path and query /static {'file': 'gua.js'} 
20:47:38 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:47:38 完整请求
20:47:38 请求结束
20:47:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:38 path and query /static {'file': 'todo.js'} 
20:47:38 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
//    var ut = todo.ut
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:47:38 完整请求
20:47:38 请求结束
20:47:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:38 path and query /api/todo/all {} 
20:47:38 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  }
]
20:47:42 完整请求
20:47:42 请求结束
20:47:42 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:42 path and query /api/todo/delete {'id': '2'} 
20:47:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488959077,
  "id": 2,
  "completed": false,
  "title": "瓜",
  "ut": 1488959077
}
20:47:44 完整请求
20:47:44 请求结束
20:47:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:44 path and query /api/todo/add {} 
20:47:49 完整请求
20:47:49 请求结束
20:47:49 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:49 path and query /api/todo/add {} {"title":"123"}
20:47:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488977269,
  "id": 6,
  "completed": false,
  "title": "123",
  "ut": 1488977269
}
20:47:49 完整请求
20:47:49 请求结束
20:47:49 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:49 path and query /api/todo/add {} {"title":"123"}
20:47:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488977269,
  "id": 7,
  "completed": false,
  "title": "123",
  "ut": 1488977269
}
20:47:53 完整请求
20:47:53 请求结束
20:47:53 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:53 path and query /api/todo/add {} {"title":"123asd"}
20:47:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488977273,
  "id": 8,
  "completed": false,
  "title": "123asd",
  "ut": 1488977273
}
20:48:51 完整请求
20:48:51 请求结束
20:48:51 完整请求
20:48:51 请求结束
20:48:51 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:48:51 path and query /todo/index {} 
20:48:51 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:48:51 完整请求
20:48:51 请求结束
20:48:51 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:48:51 path and query /static {'file': 'gua.js'} 
20:48:51 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:48:52 完整请求
20:48:52 请求结束
20:48:52 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:48:52 path and query /static {'file': 'todo.js'} 
20:48:52 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:48:52 完整请求
20:48:52 请求结束
20:48:52 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:48:52 path and query /api/todo/all {} 
20:48:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  },
  {
    "ct": 1488977269,
    "id": 6,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977269,
    "id": 7,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977273,
    "id": 8,
    "completed": false,
    "title": "123asd",
    "ut": 1488977273
  }
]
20:51:34 完整请求
20:51:34 请求结束
20:51:35 完整请求
20:51:35 请求结束
20:51:35 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:35 path and query /todo/index {} 
20:51:35 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:51:35 完整请求
20:51:35 请求结束
20:51:35 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:35 path and query /static {'file': 'gua.js'} 
20:51:35 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:51:35 完整请求
20:51:35 请求结束
20:51:35 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:35 path and query /static {'file': 'todo.js'} 
20:51:35 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <input class="todo-edit-input">
        <button class='todo-update'>更新</button>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:51:35 完整请求
20:51:35 请求结束
20:51:35 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:35 path and query /api/todo/all {} 
20:51:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  },
  {
    "ct": 1488977269,
    "id": 6,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977269,
    "id": 7,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977273,
    "id": 8,
    "completed": false,
    "title": "123asd",
    "ut": 1488977273
  }
]
20:51:49 完整请求
20:51:49 请求结束
20:51:49 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:49 path and query /todo/index {} 
20:51:49 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:51:49 完整请求
20:51:49 请求结束
20:51:50 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:50 path and query /static {'file': 'gua.js'} 
20:51:50 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:51:50 完整请求
20:51:50 请求结束
20:51:50 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:50 path and query /static {'file': 'todo.js'} 
20:51:50 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <input class="todo-edit-input">
        <button class='todo-update'>更新</button>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:51:50 完整请求
20:51:50 请求结束
20:51:50 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:50 path and query /api/todo/all {} 
20:51:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  },
  {
    "ct": 1488977269,
    "id": 6,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977269,
    "id": 7,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977273,
    "id": 8,
    "completed": false,
    "title": "123asd",
    "ut": 1488977273
  }
]
20:56:53 完整请求
20:56:53 请求结束
20:56:53 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:56:53 path and query /todo/index {} 
20:56:53 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:56:53 完整请求
20:56:53 请求结束
20:56:53 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:56:54 path and query /static {'file': 'gua.js'} 
20:56:54 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:56:54 完整请求
20:56:54 请求结束
20:56:54 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:56:54 path and query /static {'file': 'todo.js'} 
20:56:54 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id
                'title': title,
            }
            apiTodoUpdate(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:57:06 完整请求
20:57:06 请求结束
20:57:06 完整请求
20:57:06 请求结束
20:57:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:57:06 path and query /todo/index {} 
20:57:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:57:06 完整请求
20:57:06 请求结束
20:57:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:57:06 path and query /static {'file': 'gua.js'} 
20:57:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:57:07 完整请求
20:57:07 请求结束
20:57:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:57:07 path and query /static {'file': 'todo.js'} 
20:57:07 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:57:07 完整请求
20:57:07 请求结束
20:57:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:57:07 path and query /api/todo/all {} 
20:57:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  },
  {
    "ct": 1488977269,
    "id": 6,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977269,
    "id": 7,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977273,
    "id": 8,
    "completed": false,
    "title": "123asd",
    "ut": 1488977273
  }
]
20:59:38 完整请求
20:59:38 请求结束
20:59:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:38 path and query /todo/index {} 
20:59:38 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:59:38 完整请求
20:59:38 请求结束
20:59:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:38 path and query /static {'file': 'gua.js'} 
20:59:38 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}

20:59:38 完整请求
20:59:38 请求结束
20:59:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:39 path and query /static {'file': 'todo.js'} 
20:59:39 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:59:39 完整请求
20:59:39 请求结束
20:59:39 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:39 path and query /api/todo/all {} 
20:59:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488975265,
    "id": 4,
    "ct": 1488975265,
    "title": "吃饭",
    "completed": false
  },
  {
    "ut": 1488977083,
    "id": 5,
    "ct": 1488977083,
    "title": "123",
    "completed": false
  },
  {
    "ut": 1488977269,
    "id": 6,
    "ct": 1488977269,
    "title": "123",
    "completed": false
  },
  {
    "ut": 1488977269,
    "id": 7,
    "ct": 1488977269,
    "title": "123",
    "completed": false
  },
  {
    "ut": 1488977273,
    "id": 8,
    "ct": 1488977273,
    "title": "123asd",
    "completed": false
  }
]
20:59:41 完整请求
20:59:42 请求结束
20:59:42 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:42 path and query /api/todo/delete {'id': '5'} 
20:59:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488977083,
  "id": 5,
  "ct": 1488977083,
  "title": "123",
  "completed": false
}
20:59:42 完整请求
20:59:42 请求结束
20:59:42 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:42 path and query /api/todo/delete {'id': '6'} 
20:59:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488977269,
  "id": 6,
  "ct": 1488977269,
  "title": "123",
  "completed": false
}
20:59:43 完整请求
20:59:43 请求结束
20:59:43 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:43 path and query /api/todo/delete {'id': '8'} 
20:59:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488977273,
  "id": 8,
  "ct": 1488977273,
  "title": "123asd",
  "completed": false
}
20:59:43 完整请求
20:59:43 请求结束
20:59:43 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:43 path and query /api/todo/delete {'id': '7'} 
20:59:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488977269,
  "id": 7,
  "ct": 1488977269,
  "title": "123",
  "completed": false
}
20:59:53 完整请求
20:59:54 请求结束
20:59:54 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:54 path and query /api/todo/update {} {"id":"4","title":"吃瓜"}
20:59:54 kwargs,  {'id': 4} <class 'dict'>
20:59:54 debug 0
20:59:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488977994,
  "id": 4,
  "ct": 1488975265,
  "title": "吃瓜",
  "completed": false
}
21:05:10 完整请求
21:05:10 请求结束
21:05:10 完整请求
21:05:10 请求结束
21:05:10 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:10 path and query /todo/index {} 
21:05:10 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:05:11 完整请求
21:05:11 请求结束
21:05:11 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:11 path and query /static {'file': 'gua.js'} 
21:05:11 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}

21:05:11 完整请求
21:05:11 请求结束
21:05:11 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:11 path and query /static {'file': 'todo.js'} 
21:05:11 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:05:11 完整请求
21:05:11 请求结束
21:05:11 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:11 path and query /api/todo/all {} 
21:05:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488977994,
    "id": 4,
    "ct": 1488975265,
    "title": "吃瓜",
    "completed": false
  }
]
21:05:18 完整请求
21:05:18 请求结束
21:05:18 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:18 path and query /api/todo/update {} {"id":"4","title":"hello"}
21:05:18 kwargs,  {'id': 4} <class 'dict'>
21:05:18 debug 0
21:05:18 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488978318,
  "id": 4,
  "ct": 1488975265,
  "title": "hello",
  "completed": false
}
21:05:20 完整请求
21:05:20 请求结束
21:05:20 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:21 path and query /todo/index {} 
21:05:21 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:05:21 完整请求
21:05:21 完整请求
21:05:21 请求结束
21:05:21 请求结束
21:05:21 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:21 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:21 path and query /static {'file': 'todo.js'} 
21:05:21 path and query /static {'file': 'gua.js'} 
21:05:21 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:05:21 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}

21:05:21 完整请求
21:05:21 请求结束
21:05:21 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:21 path and query /api/todo/all {} 
21:05:21 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488978318,
    "id": 4,
    "ct": 1488975265,
    "title": "hello",
    "completed": false
  }
]
21:07:45 完整请求
21:07:45 请求结束
21:07:46 完整请求
21:07:46 请求结束
21:07:46 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:07:46 path and query /todo/index {} 
21:07:46 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:07:46 完整请求
21:07:46 请求结束
21:07:46 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:07:46 path and query /static {'file': 'gua.js'} 
21:07:46 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:07:46 完整请求
21:07:46 请求结束
21:07:46 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:07:46 path and query /static {'file': 'todo.js'} 
21:07:46 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:07:46 完整请求
21:07:46 请求结束
21:07:46 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:07:46 path and query /api/todo/all {} 
21:07:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488978318,
    "id": 4,
    "ct": 1488975265,
    "title": "hello",
    "completed": false
  }
]
21:10:33 完整请求
21:10:33 请求结束
21:10:33 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:33 path and query /todo/index {} 
21:10:34 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:10:34 完整请求
21:10:34 请求结束
21:10:34 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:34 path and query /static {'file': 'gua.js'} 
21:10:34 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:10:34 完整请求
21:10:34 请求结束
21:10:34 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:34 path and query /static {'file': 'todo.js'} 
21:10:34 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:10:34 完整请求
21:10:34 请求结束
21:10:34 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:34 path and query /api/todo/all {} 
21:10:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488978318,
    "id": 4,
    "ct": 1488975265,
    "title": "hello",
    "completed": false
  }
]
21:10:39 完整请求
21:10:39 请求结束
21:10:39 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:39 path and query /api/todo/update {} {"id":"4","title":"gua"}
21:10:39 kwargs,  {'id': 4} <class 'dict'>
21:10:39 debug 0
21:10:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488978639,
  "id": 4,
  "ct": 1488975265,
  "title": "gua",
  "completed": false
}
21:10:44 完整请求
21:10:44 请求结束
21:10:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:44 path and query /todo/index {} 
21:10:44 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:10:44 完整请求
21:10:44 完整请求
21:10:44 请求结束
21:10:44 请求结束
21:10:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:44 path and query /static {'file': 'todo.js'} 
21:10:44 path and query /static {'file': 'gua.js'} 
21:10:45 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:10:45 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:10:45 完整请求
21:10:45 请求结束
21:10:45 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:45 path and query /api/todo/all {} 
21:10:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488978639,
    "id": 4,
    "ct": 1488975265,
    "title": "gua",
    "completed": false
  }
]
21:10:50 完整请求
21:10:50 请求结束
21:10:50 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:50 path and query /api/todo/update {} 
21:11:09 完整请求
21:11:09 请求结束
21:11:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:11:09 path and query /api/todo/update {} {"id":"4","title":"瓜"}
21:11:09 kwargs,  {'id': 4} <class 'dict'>
21:11:09 debug 0
21:11:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488978669,
  "id": 4,
  "ct": 1488975265,
  "title": "瓜",
  "completed": false
}
21:11:09 完整请求
21:11:09 请求结束
21:11:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:11:09 path and query /api/todo/update {} {"id":"4","title":"瓜"}
21:11:09 kwargs,  {'id': 4} <class 'dict'>
21:11:09 debug 0
21:11:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488978669,
  "id": 4,
  "ct": 1488975265,
  "title": "瓜",
  "completed": false
}
21:17:29 完整请求
21:17:29 请求结束
21:17:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:29 path and query /todo/index {} 
21:17:29 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:17:29 完整请求
21:17:29 请求结束
21:17:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:29 path and query /static {'file': 'gua.js'} 
21:17:30 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:17:30 完整请求
21:17:30 请求结束
21:17:30 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:30 path and query /static {'file': 'todo.js'} 
21:17:30 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:17:30 完整请求
21:17:30 请求结束
21:17:30 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:30 path and query /api/todo/all {} 
21:17:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488978669,
    "id": 4,
    "ct": 1488975265,
    "title": "瓜",
    "completed": false
  }
]
21:17:34 完整请求
21:17:34 请求结束
21:17:34 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:35 path and query /weibo/index {} 
21:17:35 kwargs,  {'id': -1} <class 'dict'>
21:17:35 响应
 HTTP/1.1 302 OK
Location: /login
Content-Type: text/html


21:17:35 完整请求
21:17:35 请求结束
21:17:35 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:35 path and query /login {} 
21:17:35 login, cookies {'Pycharm-df207d35': '600adc10-1f5d-46ff-b99f-861b091847e7'}
21:17:35 响应
 HTTP/1.1 200 VERY OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>注册登录页面</title>
</head>
<body>
    <h1>登录</h1>
    <h2>你好 </h2>
    <form action="/login" method="post">
        <input type="text" name="username" placeholder="请输入用户名">
        <br>
        <input type="text" name="password" placeholder="请输入密码">
        <br>
        <button type="submit">登录</button>
    </form>
    <h3></h3>
</body>
</html>
21:17:57 完整请求
21:17:57 请求结束
21:17:57 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:57 path and query /weibo/index {} 
21:17:57 完整请求
21:17:57 请求结束
21:17:57 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:57 path and query /weibo/index {} 
21:18:06 完整请求
21:18:06 完整请求
21:18:06 完整请求
21:18:06 完整请求
21:18:06 请求结束
21:18:06 请求结束
21:18:06 请求结束
21:18:06 请求结束
21:18:06 完整请求
21:18:06 请求结束
21:18:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:06 path and query /todo/index {} 
21:18:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:18:06 完整请求
21:18:06 请求结束
21:18:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:06 path and query /static {'file': 'gua.js'} 
21:18:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:18:06 完整请求
21:18:06 请求结束
21:18:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:06 path and query /static {'file': 'todo.js'} 
21:18:06 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:18:07 完整请求
21:18:07 请求结束
21:18:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:07 path and query /api/todo/all {} 
21:18:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "completed": false,
    "id": 4,
    "title": "瓜",
    "ct": 1488975265,
    "ut": 1488978669
  }
]
21:18:09 完整请求
21:18:09 完整请求
21:18:09 请求结束
21:18:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:09 请求结束
21:18:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:09 path and query /weibo/index {} 
21:18:09 path and query /weibo/index {} 
21:18:29 完整请求
21:18:29 请求结束
21:18:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:29 path and query /weibo/index {} 
21:18:50 完整请求
21:18:50 请求结束
21:18:50 完整请求
21:18:50 请求结束
21:18:50 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:50 path and query /todo/index {} 
21:18:50 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:18:51 完整请求
21:18:51 请求结束
21:18:51 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:51 path and query /static {'file': 'gua.js'} 
21:18:51 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:18:51 完整请求
21:18:51 请求结束
21:18:51 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:51 path and query /static {'file': 'todo.js'} 
21:18:51 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:18:51 完整请求
21:18:51 请求结束
21:18:51 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:51 path and query /api/todo/all {} 
21:18:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488978669,
    "ct": 1488975265,
    "id": 4,
    "title": "瓜",
    "completed": false
  }
]
21:18:54 完整请求
21:18:54 请求结束
21:18:54 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:54 path and query /weibo/index {} 
21:18:54 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:18:54 完整请求
21:18:54 完整请求
21:18:54 请求结束
21:18:54 请求结束
21:18:55 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:55 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:55 path and query /static {'file': 'gua.js'} 
21:18:55 path and query /static {'file': 'weibo.js'} 
21:18:55 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:18:55 完整请求
21:18:55 请求结束
21:18:55 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:55 path and query /static {'file': 'weibo.js'} 
21:18:55 完整请求
21:18:55 请求结束
21:18:55 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:55 path and query /static {'file': 'weibo.js'} 
21:40:12 完整请求
21:40:12 请求结束
21:40:12 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:12 path and query /weibo/index {} 
21:40:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:40:12 完整请求
21:40:12 请求结束
21:40:13 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:13 path and query /static {'file': 'gua.js'} 
21:40:13 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

21:40:13 完整请求
21:40:13 请求结束
21:40:13 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:13 path and query /static {'file': 'weibo.js'} 
21:40:13 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.Weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:40:13 完整请求
21:40:13 请求结束
21:40:13 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:14 path and query /weibo/index {} 
21:40:14 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:40:14 完整请求
21:40:14 完整请求
21:40:14 请求结束
21:40:14 请求结束
21:40:14 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:14 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:14 path and query /static {'file': 'weibo.js'} 
21:40:14 path and query /static {'file': 'gua.js'} 
21:40:14 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.Weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:40:14 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

21:40:14 完整请求
21:40:14 请求结束
21:40:14 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:14 path and query /api/weibo/all {} 
21:40:15 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
21:40:28 完整请求
21:40:28 请求结束
21:40:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:29 path and query /weibo/index {} 
21:40:29 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:40:29 完整请求
21:40:29 请求结束
21:40:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:29 path and query /static {'file': 'gua.js'} 
21:40:29 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

21:40:29 完整请求
21:40:29 请求结束
21:40:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:29 path and query /static {'file': 'weibo.js'} 
21:40:29 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.Weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:40:29 完整请求
21:40:29 请求结束
21:40:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:29 path and query /api/weibo/all {} 
21:40:29 kwargs,  {'weibo_id': 1} <class 'dict'>
21:40:29 kwargs,  {'weibo_id': 2} <class 'dict'>
21:40:29 kwargs,  {'weibo_id': 3} <class 'dict'>
21:40:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "user_id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "id": 1,
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "content": "lbvu is right",
        "id": 2,
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "content": "你好",
    "id": 2,
    "user_id": 1,
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "123",
        "id": 4,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "asdf",
        "id": 5,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "说得好",
        "id": 7,
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "content": "说得好",
        "id": 8,
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "content": "hahaha",
    "id": 3,
    "user_id": 1,
    "comments": [
      {
        "content": "123",
        "id": 6,
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  }
]
21:41:09 完整请求
21:41:09 请求结束
21:41:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:41:09 path and query /weibo/index {} 
21:41:09 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:41:09 完整请求
21:41:09 请求结束
21:41:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:41:09 path and query /static {'file': 'gua.js'} 
21:41:09 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

21:41:09 完整请求
21:41:09 请求结束
21:41:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:41:10 path and query /static {'file': 'weibo.js'} 
21:41:10 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:41:10 完整请求
21:41:10 请求结束
21:41:10 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:41:10 path and query /api/weibo/all {} 
21:41:10 kwargs,  {'weibo_id': 1} <class 'dict'>
21:41:10 kwargs,  {'weibo_id': 2} <class 'dict'>
21:41:10 kwargs,  {'weibo_id': 3} <class 'dict'>
21:41:10 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "user_id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "id": 1,
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "content": "lbvu is right",
        "id": 2,
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "content": "你好",
    "id": 2,
    "user_id": 1,
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "123",
        "id": 4,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "asdf",
        "id": 5,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "说得好",
        "id": 7,
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "content": "说得好",
        "id": 8,
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "content": "hahaha",
    "id": 3,
    "user_id": 1,
    "comments": [
      {
        "content": "123",
        "id": 6,
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  }
]
21:42:06 完整请求
21:42:06 请求结束
21:42:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:42:06 path and query /weibo/index {} 
21:42:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:42:06 完整请求
21:42:06 请求结束
21:42:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:42:06 path and query /static {'file': 'gua.js'} 
21:42:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

21:42:06 完整请求
21:42:06 请求结束
21:42:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:42:06 path and query /static {'file': 'weibo.js'} 
21:42:07 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:42:07 完整请求
21:42:07 请求结束
21:42:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:42:07 path and query /api/weibo/all {} 
21:42:07 kwargs,  {'weibo_id': 1} <class 'dict'>
21:42:07 kwargs,  {'weibo_id': 2} <class 'dict'>
21:42:07 kwargs,  {'weibo_id': 3} <class 'dict'>
21:42:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "user_id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "id": 1,
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "content": "lbvu is right",
        "id": 2,
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "content": "你好",
    "id": 2,
    "user_id": 1,
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "123",
        "id": 4,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "asdf",
        "id": 5,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "说得好",
        "id": 7,
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "content": "说得好",
        "id": 8,
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "content": "hahaha",
    "id": 3,
    "user_id": 1,
    "comments": [
      {
        "content": "123",
        "id": 6,
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  }
]
21:44:32 完整请求
21:44:32 请求结束
10:47:22 完整请求
10:47:22 请求结束
10:47:22 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
10:47:22 path and query / {} 
10:47:22 响应
 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


10:47:22 完整请求
10:47:22 请求结束
10:47:22 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
10:47:22 path and query /todo/index {} 
10:47:22 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
10:47:22 完整请求
10:47:22 请求结束
10:47:22 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
10:47:22 path and query /static {'file': 'gua.js'} 
10:47:22 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

10:47:23 完整请求
10:47:23 请求结束
10:47:23 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
10:47:23 path and query /static {'file': 'todo.js'} 
10:47:23 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
10:47:23 完整请求
10:47:23 请求结束
10:47:23 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
10:47:23 path and query /api/todo/all {} 
10:47:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "title": "瓜",
    "completed": false,
    "ct": 1488975265,
    "ut": 1488978669
  }
]
10:51:39 完整请求
10:51:39 请求结束
11:01:57 完整请求
11:01:57 请求结束
11:01:57 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
11:01:57 path and query /api/todo/delete {'id': '4'} 
11:01:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "title": "瓜",
  "completed": false,
  "ct": 1488975265,
  "ut": 1488978669
}
11:02:06 完整请求
11:02:06 请求结束
11:02:06 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
11:02:06 path and query /api/todo/add {} {"title":"gua"}
11:02:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "gua",
  "completed": false,
  "ct": 1520478126,
  "ut": 1520478126
}
11:02:10 完整请求
11:02:10 请求结束
11:02:10 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
11:02:10 path and query /api/todo/add {} {"title":"gua123"}
11:02:10 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "title": "gua123",
  "completed": false,
  "ct": 1520478130,
  "ut": 1520478130
}
11:02:12 完整请求
11:02:12 请求结束
11:02:12 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
11:02:12 path and query /api/todo/delete {'id': '1'} 
11:02:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "gua",
  "completed": false,
  "ct": 1520478126,
  "ut": 1520478126
}
11:02:13 完整请求
11:02:13 请求结束
11:02:13 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
11:02:13 path and query /api/todo/delete {'id': '2'} 
11:02:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "title": "gua123",
  "completed": false,
  "ct": 1520478130,
  "ut": 1520478130
}
11:03:09 完整请求
11:03:09 请求结束
14:06:04 完整请求
14:06:04 请求结束
14:06:04 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:04 path and query /api/todo/add {} {"title":"gua123"}
14:06:04 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "gua123",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489164
}
14:06:06 完整请求
14:06:06 请求结束
14:06:06 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:06 path and query /api/todo/add {} {"title":"gua123"}
14:06:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "title": "gua123",
  "completed": false,
  "ct": 1520489166,
  "ut": 1520489166
}
14:06:24 完整请求
14:06:24 请求结束
14:06:24 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:24 path and query /api/todo/update {} {"id":"1","title":"下午2:06:04"}
14:06:24 kwargs,  {'id': 1} <class 'dict'>
14:06:24 debug 0
14:06:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "下午2:06:04",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489184
}
14:06:25 完整请求
14:06:25 请求结束
14:06:25 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:25 path and query /api/todo/update {} {"id":"1","title":""}
14:06:25 kwargs,  {'id': 1} <class 'dict'>
14:06:25 debug 0
14:06:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489185
}
14:06:26 完整请求
14:06:26 请求结束
14:06:26 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:26 path and query /api/todo/update {} {"id":"1","title":""}
14:06:26 kwargs,  {'id': 1} <class 'dict'>
14:06:26 debug 0
14:06:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489186
}
14:06:26 完整请求
14:06:26 请求结束
14:06:26 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:26 path and query /api/todo/update {} {"id":"1","title":""}
14:06:26 kwargs,  {'id': 1} <class 'dict'>
14:06:26 debug 0
14:06:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489186
}
14:06:26 完整请求
14:06:26 请求结束
14:06:26 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:26 path and query /api/todo/update {} {"id":"1","title":""}
14:06:26 kwargs,  {'id': 1} <class 'dict'>
14:06:26 debug 0
14:06:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489186
}
14:06:26 完整请求
14:06:26 请求结束
14:06:26 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:26 path and query /api/todo/update {} {"id":"1","title":"下午2:06:04"}
14:06:26 kwargs,  {'id': 1} <class 'dict'>
14:06:26 debug 0
14:06:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "下午2:06:04",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489186
}
14:06:27 完整请求
14:06:27 请求结束
14:06:27 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:27 path and query /api/todo/update {} {"id":"1","title":"下午2:06:04"}
14:06:27 kwargs,  {'id': 1} <class 'dict'>
14:06:27 debug 0
14:06:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "下午2:06:04",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489187
}
14:06:27 完整请求
14:06:27 请求结束
14:06:27 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:27 path and query /api/todo/update {} {"id":"1","title":"下午2:06:04"}
14:06:27 完整请求
14:06:27 kwargs,  {'id': 1} <class 'dict'>
14:06:27 请求结束
14:06:27 debug 0
14:06:27 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "下午2:06:04",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489187
}
14:06:27 path and query /api/todo/update {} {"id":"1","title":"下午2:06:04"}
14:06:27 kwargs,  {'id': 1} <class 'dict'>
14:06:27 debug 0
14:06:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "下午2:06:04",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489187
}
14:06:27 完整请求
14:06:27 请求结束
14:06:27 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:27 path and query /api/todo/update {} {"id":"1","title":"下午2:06:04"}
14:06:27 kwargs,  {'id': 1} <class 'dict'>
14:06:27 debug 0
14:06:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "下午2:06:04",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489187
}
14:06:28 完整请求
14:06:28 请求结束
14:06:28 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:28 path and query /api/todo/update {} {"id":"1","title":"下午2:06:04"}
14:06:28 kwargs,  {'id': 1} <class 'dict'>
14:06:28 debug 0
14:06:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "下午2:06:04",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489188
}
14:06:28 完整请求
14:06:28 请求结束
14:06:28 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:28 path and query /api/todo/update {} {"id":"1","title":"下午2:06:04"}
14:06:28 kwargs,  {'id': 1} <class 'dict'>
14:06:28 debug 0
14:06:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "下午2:06:04",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489188
}
14:06:29 完整请求
14:06:29 请求结束
14:06:29 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:29 path and query /api/todo/update {} {"id":"1","title":""}
14:06:29 kwargs,  {'id': 1} <class 'dict'>
14:06:29 debug 0
14:06:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489189
}
14:06:30 完整请求
14:06:30 请求结束
14:06:30 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:30 path and query /api/todo/update {} {"id":"1","title":""}
14:06:30 kwargs,  {'id': 1} <class 'dict'>
14:06:30 debug 0
14:06:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489190
}
14:06:30 完整请求
14:06:30 请求结束
14:06:30 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:30 path and query /api/todo/update {} {"id":"1","title":""}
14:06:30 kwargs,  {'id': 1} <class 'dict'>
14:06:30 debug 0
14:06:30 完整请求
14:06:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489190
}
14:06:30 请求结束
14:06:30 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:30 path and query /api/todo/update {} {"id":"1","title":""}
14:06:30 kwargs,  {'id': 1} <class 'dict'>
14:06:30 debug 0
14:06:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489190
}
14:06:30 完整请求
14:06:30 请求结束
14:06:30 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:30 path and query /api/todo/update {} {"id":"1","title":"下午2:06:04"}
14:06:30 kwargs,  {'id': 1} <class 'dict'>
14:06:30 debug 0
14:06:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "下午2:06:04",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489190
}
14:06:31 完整请求
14:06:31 请求结束
14:06:31 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:31 path and query /api/todo/update {} {"id":"1","title":"下午2:06:04"}
14:06:31 kwargs,  {'id': 1} <class 'dict'>
14:06:31 debug 0
14:06:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "下午2:06:04",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489191
}
14:06:34 完整请求
14:06:34 请求结束
14:06:34 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:34 path and query /api/todo/update {} {"id":"1","title":""}
14:06:34 kwargs,  {'id': 1} <class 'dict'>
14:06:34 debug 0
14:06:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489194
}
14:06:35 完整请求
14:06:35 请求结束
14:06:35 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:35 path and query /api/todo/update {} {"id":"1","title":""}
14:06:35 kwargs,  {'id': 1} <class 'dict'>
14:06:35 debug 0
14:06:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489195
}
14:06:35 完整请求
14:06:35 请求结束
14:06:35 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:35 path and query /api/todo/update {} {"id":"1","title":""}
14:06:35 kwargs,  {'id': 1} <class 'dict'>
14:06:35 debug 0
14:06:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489195
}
14:06:35 完整请求
14:06:35 请求结束
14:06:35 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:35 path and query /api/todo/update {} {"id":"1","title":""}
14:06:35 kwargs,  {'id': 1} <class 'dict'>
14:06:35 debug 0
14:06:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489195
}
14:06:36 完整请求
14:06:36 请求结束
14:06:36 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:36 path and query /api/todo/update {} {"id":"1","title":""}
14:06:36 kwargs,  {'id': 1} <class 'dict'>
14:06:36 debug 0
14:06:36 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489196
}
14:06:36 完整请求
14:06:36 请求结束
14:06:36 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:36 path and query /api/todo/update {} {"id":"1","title":""}
14:06:36 kwargs,  {'id': 1} <class 'dict'>
14:06:37 debug 0
14:06:37 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489197
}
14:06:38 完整请求
14:06:38 请求结束
14:06:38 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:38 path and query /api/todo/update {} {"id":"1","title":"下午2:06:04"}
14:06:38 kwargs,  {'id': 1} <class 'dict'>
14:06:38 debug 0
14:06:38 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "下午2:06:04",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489198
}
14:06:39 完整请求
14:06:39 请求结束
14:06:39 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:39 path and query /api/todo/delete {'id': '1'} 
14:06:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "下午2:06:04",
  "completed": false,
  "ct": 1520489164,
  "ut": 1520489198
}
14:06:40 完整请求
14:06:40 请求结束
14:06:40 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:40 path and query /api/todo/delete {'id': '2'} 
14:06:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "title": "gua123",
  "completed": false,
  "ct": 1520489166,
  "ut": 1520489166
}
14:06:40 完整请求
14:06:40 请求结束
14:06:40 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
14:06:40 path and query /api/todo/delete {'id': '2'} 
14:16:49 完整请求
14:16:49 请求结束
16:05:06 完整请求
16:05:06 请求结束
16:05:06 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:05:06 path and query /todo/index {} 
16:05:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:05:06 完整请求
16:05:06 完整请求
16:05:06 请求结束
16:05:06 请求结束
16:05:06 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:05:06 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:05:06 path and query /static {'file': 'gua.js'} 
16:05:06 path and query /static {'file': 'todo.js'} 
16:05:06 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:05:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

16:05:06 完整请求
16:05:06 请求结束
16:05:06 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:05:07 path and query /api/todo/all {} 
16:05:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[]
16:05:10 完整请求
16:05:10 请求结束
16:05:10 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:05:10 path and query /todo {} 
16:05:10 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:05:11 完整请求
16:05:11 请求结束
16:05:11 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:05:11 path and query / {} 
16:05:11 响应
 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


16:05:11 完整请求
16:05:11 请求结束
16:05:11 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:05:11 path and query /todo/index {} 
16:05:11 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:05:11 完整请求
16:05:11 完整请求
16:05:11 请求结束
16:05:11 请求结束
16:05:11 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:05:11 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:05:11 path and query /static {'file': 'todo.js'} 
16:05:11 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:05:11 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

16:05:12 完整请求
16:05:12 请求结束
16:05:12 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:05:12 path and query /api/todo/all {} 
16:05:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[]
16:05:20 完整请求
16:05:20 请求结束
16:05:20 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:05:21 path and query /weibo {} 
16:05:21 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:05:27 完整请求
16:05:27 请求结束
16:05:27 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:05:27 path and query /weibo/index {} 
16:05:27 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:05:27 完整请求
16:05:27 完整请求
16:05:27 请求结束
16:05:27 请求结束
16:05:27 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:05:27 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:05:27 path and query /static {'file': 'weibo.js'} 
16:05:27 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

16:05:27 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:05:27 完整请求
16:05:27 请求结束
16:05:27 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:05:27 path and query /api/weibo/all {} 
16:05:27 kwargs,  {'weibo_id': 1} <class 'dict'>
16:05:27 kwargs,  {'weibo_id': 2} <class 'dict'>
16:05:27 kwargs,  {'weibo_id': 3} <class 'dict'>
16:05:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  }
]
16:06:19 完整请求
16:06:19 请求结束
16:39:36 完整请求
16:39:36 请求结束
16:39:36 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:39:36 path and query /index {} 
16:39:36 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:39:44 完整请求
16:39:44 请求结束
16:39:44 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:39:44 path and query /weibo/index {} 
16:39:44 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
16:39:44 完整请求
16:39:44 完整请求
16:39:44 请求结束
16:39:44 请求结束
16:39:44 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:39:44 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:39:44 path and query /static {'file': 'weibo.js'} 
16:39:44 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

16:39:44 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

16:39:44 完整请求
16:39:44 请求结束
16:39:44 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:39:44 path and query /api/weibo/all {} 
16:39:44 kwargs,  {'weibo_id': 1} <class 'dict'>
16:39:44 kwargs,  {'weibo_id': 2} <class 'dict'>
16:39:44 kwargs,  {'weibo_id': 3} <class 'dict'>
16:39:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  }
]
16:54:09 完整请求
16:54:10 请求结束
16:54:10 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:54:10 path and query / {} 
16:54:10 响应
 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


16:54:10 完整请求
16:54:10 请求结束
16:54:10 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:54:10 path and query /todo/index {} 
16:54:10 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:54:10 完整请求
16:54:10 请求结束
16:54:10 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:54:10 path and query /static {'file': 'gua.js'} 
16:54:10 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

16:54:10 完整请求
16:54:10 请求结束
16:54:10 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:54:10 path and query /static {'file': 'todo.js'} 
16:54:10 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:54:10 完整请求
16:54:10 请求结束
16:54:10 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:54:10 path and query /api/todo/all {} 
16:54:10 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[]
16:54:37 完整请求
16:54:37 请求结束
16:54:38 完整请求
16:54:38 请求结束
16:54:38 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:54:38 path and query /api/todo/add {} {"title":"23333"}
16:54:38 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "23333",
  "completed": false,
  "ct": 1520499278,
  "ut": 1520499278
}
16:55:12 完整请求
16:55:12 请求结束
16:55:58 完整请求
16:55:58 请求结束
16:55:58 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:55:58 path and query /todo/index {} 
16:55:58 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:55:58 完整请求
16:55:58 完整请求
16:55:58 请求结束
16:55:58 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:55:58 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:55:58 path and query /static {'file': 'todo.js'} 
16:55:58 path and query /static {'file': 'gua.js'} 
16:55:58 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:55:58 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

16:55:58 完整请求
16:55:58 请求结束
16:55:58 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:55:58 path and query /api/todo/all {} 
16:55:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "23333",
    "completed": false,
    "ct": 1520499278,
    "ut": 1520499278
  }
]
16:56:04 完整请求
16:56:04 请求结束
16:56:04 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:56:04 path and query /api/todo/add {} 
16:56:12 完整请求
16:56:12 请求结束
16:56:12 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:56:12 path and query /api/todo/add {} {"title":"456"}
16:56:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "title": "456",
  "completed": false,
  "ct": 1520499372,
  "ut": 1520499372
}
16:56:12 完整请求
16:56:12 请求结束
16:56:12 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:56:12 path and query /api/todo/add {} {"title":"123"}
16:56:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "123",
  "completed": false,
  "ct": 1520499372,
  "ut": 1520499372
}
16:56:14 完整请求
16:56:14 请求结束
16:56:14 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:56:14 path and query /api/todo/delete {'id': '3'} 
16:56:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "123",
  "completed": false,
  "ct": 1520499372,
  "ut": 1520499372
}
16:56:16 完整请求
16:56:16 请求结束
16:56:16 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:56:16 path and query /api/todo/delete {'id': '2'} 
16:56:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "title": "456",
  "completed": false,
  "ct": 1520499372,
  "ut": 1520499372
}
16:56:18 完整请求
16:56:18 请求结束
16:56:18 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:56:18 path and query /api/todo/delete {'id': '1'} 
16:56:18 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "23333",
  "completed": false,
  "ct": 1520499278,
  "ut": 1520499278
}
16:57:11 完整请求
16:57:11 请求结束
16:57:11 完整请求
16:57:11 请求结束
16:57:11 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:57:11 path and query /todo/index {} 
16:57:11 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:57:11 完整请求
16:57:11 完整请求
16:57:11 请求结束
16:57:11 请求结束
16:57:12 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:57:12 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:57:12 path and query /static {'file': 'gua.js'} 

16:57:12 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

16:57:12 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:57:12 完整请求
16:57:12 请求结束
16:57:12 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
16:57:12 path and query /api/todo/all {} 
16:57:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[]
17:01:10 完整请求
17:01:10 请求结束
21:07:41 完整请求
21:07:41 请求结束
21:07:41 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
21:07:41 path and query /todo {} 
21:07:41 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
21:07:42 完整请求
21:07:42 请求结束
21:07:42 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
21:07:42 path and query /todo {} 
21:07:42 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
21:07:42 完整请求
21:07:42 请求结束
21:07:42 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
21:07:42 path and query /favicon.ico {} 
21:07:42 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
21:07:57 完整请求
21:07:57 请求结束
21:07:57 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
21:07:57 path and query /admin/users {} 
21:07:57 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
21:08:02 完整请求
21:08:02 请求结束
21:08:02 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
21:08:02 path and query /api/todo {} 
21:08:02 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
21:08:13 完整请求
21:08:13 完整请求
21:08:13 完整请求
21:08:13 请求结束
21:08:13 请求结束
21:08:13 请求结束
21:08:14 完整请求
21:08:14 请求结束
21:08:14 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
21:08:14 path and query /api/todo/all {} 
21:08:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[]
21:08:34 完整请求
21:08:34 完整请求
21:08:34 完整请求
21:08:34 请求结束
21:08:34 请求结束
21:08:34 请求结束
21:08:34 完整请求
21:08:34 请求结束
21:08:34 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
21:08:35 path and query / {} 
21:08:35 响应
 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


21:08:35 完整请求
21:08:35 请求结束
21:08:35 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
21:08:35 path and query /todo/index {} 
21:08:35 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:08:35 完整请求
21:08:35 请求结束
21:08:35 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
21:08:35 path and query /static {'file': 'gua.js'} 
21:08:35 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数 {当请求得到响应，就自动激发}
    r.onreadystatechange = function() {
        if(r.readyState === 4) {  //4表示服务器响应已完成
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response) //把服务器响应内容给了回调函数做实参，故形参也是一个{接收实参}
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API {向服务器发起请求的API}, 处理响应的回调函数写在todo.js里面
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

21:08:35 完整请求
21:08:35 请求结束
21:08:35 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
21:08:35 path and query /static {'file': 'todo.js'} 
21:08:35 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 把todoCell 插入 todo-list
    var todoList = e('.todo-list') //找到已有的todolist
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) { //r接收实参{实参来自服务器的响应}
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){ //事件监听委托给父节点todoList
        var self = event.target //找到click动作的目标位置
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:08:36 完整请求
21:08:36 请求结束
21:08:36 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
21:08:36 path and query /api/todo/all {} 
21:08:36 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[]
21:08:47 完整请求
21:08:47 请求结束
22:30:15 完整请求
22:30:15 请求结束
22:30:15 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:30:15 path and query /todo/all {} 
22:30:15 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
22:30:20 完整请求
22:30:20 请求结束
22:30:20 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:30:20 path and query /todo/ {} 
22:30:20 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
22:30:22 完整请求
22:30:22 请求结束
22:30:22 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:30:22 path and query /todo/ {} 
22:30:22 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
22:30:29 完整请求
22:30:29 请求结束
22:30:29 完整请求
22:30:29 请求结束
22:30:29 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:30:29 path and query /todo/ {} 
22:30:29 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
22:30:33 完整请求
22:30:33 请求结束
22:30:33 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:30:33 path and query /todo/index {} 
22:30:34 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
22:30:34 完整请求
22:30:34 完整请求
22:30:34 请求结束
22:30:34 请求结束
22:30:34 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:30:34 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:30:34 path and query /static {'file': 'todo.js'} 
22:30:34 path and query /static {'file': 'gua.js'} 
22:30:34 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数 {当请求得到响应，就自动激发}
    r.onreadystatechange = function() {
        if(r.readyState === 4) {  //4表示服务器响应已完成
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response) //把服务器响应内容给了回调函数做实参，故形参也是一个{接收实参}
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API {向服务器发起请求的API}, 处理响应的回调函数写在todo.js里面
// 获取所有 todo
var apiTodoAll = function(callback) { //当本函数执行完，请求得到响应后，系统自动执行回调函数callback
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

22:30:34 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 把todoCell 插入 todo-list
    var todoList = e('.todo-list') //找到已有的todolist
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) { //r接收实参{这个实参来自服务器的响应,其定义见gua.js中对回调函数输入的实参}
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() { //编写事件监听器
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) { //定义回调函数，并作为参数传入gua.js中定义的API中
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){ //事件监听委托给父节点todoList
        var self = event.target //找到click动作的目标位置
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
22:30:34 完整请求
22:30:34 请求结束
22:30:34 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:30:34 path and query /api/todo/all {} 
22:30:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[]
22:30:45 完整请求
22:30:45 请求结束
22:32:00 完整请求
22:32:00 请求结束
22:32:00 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:32:00 path and query /todo/add {} 
22:32:00 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
22:32:06 完整请求
22:32:06 请求结束
22:32:06 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:32:06 path and query /todo/index {} 
22:32:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
22:32:06 完整请求
22:32:06 完整请求
22:32:06 请求结束
22:32:06 请求结束
22:32:06 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:32:06 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:32:06 path and query /static {'file': 'todo.js'} 
22:32:06 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 把todoCell 插入 todo-list
    var todoList = e('.todo-list') //找到已有的todolist
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) { //r接收实参{这个实参来自服务器的响应,其定义见gua.js中对回调函数输入的实参}
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() { //编写事件监听器
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) { //定义回调函数，并作为参数传入gua.js中定义的API中
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){ //事件监听委托给父节点todoList
        var self = event.target //找到click动作的目标位置
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
22:32:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数 {当请求得到响应，就自动激发}
    r.onreadystatechange = function() {
        if(r.readyState === 4) {  //4表示服务器响应已完成
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response) //把服务器响应内容给了回调函数做实参，故形参也是一个{接收实参}
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API {向服务器发起请求的API}, 处理响应的回调函数写在todo.js里面
// 获取所有 todo
var apiTodoAll = function(callback) { //当本函数执行完，请求得到响应后，系统自动执行回调函数callback
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

22:32:06 完整请求
22:32:06 请求结束
22:32:06 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:32:06 path and query /api/todo/all {} 
22:32:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[]
22:32:09 完整请求
22:32:09 请求结束
22:32:09 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:32:09 path and query /api/todo/add {} {"title":"123"}
22:32:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "123",
  "completed": false,
  "ct": 1520692329,
  "ut": 1520692329
}
22:32:29 完整请求
22:32:29 请求结束
22:32:29 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:32:29 path and query /todo/all {} 
22:32:29 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
22:32:33 完整请求
22:32:33 请求结束
22:32:33 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:32:33 path and query /todo/index {} 
22:32:33 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
22:32:33 完整请求
22:32:33 完整请求
22:32:33 请求结束
22:32:33 请求结束
22:32:33 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:32:33 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:32:33 path and query /static {'file': 'gua.js'} 
22:32:33 path and query /static {'file': 'todo.js'} 
22:32:33 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 把todoCell 插入 todo-list
    var todoList = e('.todo-list') //找到已有的todolist
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) { //r接收实参{这个实参来自服务器的响应,其定义见gua.js中对回调函数输入的实参}
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() { //编写事件监听器
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) { //定义回调函数，并作为参数传入gua.js中定义的API中
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){ //事件监听委托给父节点todoList
        var self = event.target //找到click动作的目标位置
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
22:32:33 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数 {当请求得到响应，就自动激发}
    r.onreadystatechange = function() {
        if(r.readyState === 4) {  //4表示服务器响应已完成
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response) //把服务器响应内容给了回调函数做实参，故形参也是一个{接收实参}
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API {向服务器发起请求的API}, 处理响应的回调函数写在todo.js里面
// 获取所有 todo
var apiTodoAll = function(callback) { //当本函数执行完，请求得到响应后，系统自动执行回调函数callback
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

22:32:33 完整请求
22:32:33 请求结束
22:32:33 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:32:33 path and query /api/todo/all {} 
22:32:33 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "123",
    "completed": false,
    "ct": 1520692329,
    "ut": 1520692329
  }
]
22:32:51 完整请求
22:32:51 请求结束
22:33:37 完整请求
22:33:37 请求结束
22:33:37 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:33:37 path and query / {} 
22:33:37 响应
 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


22:33:37 完整请求
22:33:37 请求结束
22:33:37 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:33:37 path and query /todo/index {} 
22:33:37 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
22:33:38 完整请求
22:33:38 请求结束
22:33:38 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:33:38 path and query /static {'file': 'gua.js'} 
22:33:38 完整请求
22:33:38 请求结束
22:33:38 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数 {当请求得到响应，就自动激发}
    r.onreadystatechange = function() {
        if(r.readyState === 4) {  //4表示服务器响应已完成
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response) //把服务器响应内容给了回调函数做实参，故形参也是一个{接收实参}
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API {向服务器发起请求的API}, 处理响应的回调函数写在todo.js里面
// 获取所有 todo
var apiTodoAll = function(callback) { //当本函数执行完，请求得到响应后，系统自动执行回调函数callback
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

22:33:38 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:33:38 path and query /static {'file': 'todo.js'} 
22:33:38 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 把todoCell 插入 todo-list
    var todoList = e('.todo-list') //找到已有的todolist
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) { //r接收实参{这个实参来自服务器的响应,其定义见gua.js中对回调函数输入的实参}
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() { //编写事件监听器
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) { //定义回调函数，并作为参数传入gua.js中定义的API中
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){ //事件监听委托给父节点todoList
        var self = event.target //找到click动作的目标位置
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
22:33:38 完整请求
22:33:38 请求结束
22:33:38 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
22:33:38 path and query /api/todo/all {} 
22:33:38 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "123",
    "completed": false,
    "ct": 1520692329,
    "ut": 1520692329
  }
]
22:33:50 完整请求
22:33:50 请求结束
00:18:41 完整请求
00:18:41 请求结束
00:18:41 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
00:18:41 path and query /api/todo/delete {'id': '1'} 
00:18:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "123",
  "completed": false,
  "ct": 1520692329,
  "ut": 1520692329
}
00:18:45 完整请求
00:18:45 请求结束
00:18:45 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
00:18:45 path and query /api/todo/add {} {"title":"123"}
00:18:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "123",
  "completed": false,
  "ct": 1520698725,
  "ut": 1520698725
}
00:18:49 完整请求
00:18:49 请求结束
00:18:49 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
00:18:49 path and query /api/todo/add {} {"title":"456"}
00:18:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "title": "456",
  "completed": false,
  "ct": 1520698729,
  "ut": 1520698729
}
00:18:53 完整请求
00:18:53 请求结束
00:18:53 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
00:18:53 path and query /api/todo/add {} {"title":"789"}
00:18:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "789",
  "completed": false,
  "ct": 1520698733,
  "ut": 1520698733
}
00:19:04 完整请求
00:19:04 请求结束
00:19:04 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
00:19:04 path and query /api/todo/update {} {"id":"3","title":"678888"}
00:19:04 kwargs,  {'id': 3} <class 'dict'>
00:19:04 debug 2
00:19:04 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "678888",
  "completed": false,
  "ct": 1520698733,
  "ut": 1520698744
}
00:19:06 完整请求
00:19:07 请求结束
00:19:07 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
00:19:07 path and query /api/todo/update {} {"id":"3","title":"678888"}
00:19:07 kwargs,  {'id': 3} <class 'dict'>
00:19:07 debug 2
00:19:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "678888",
  "completed": false,
  "ct": 1520698733,
  "ut": 1520698747
}
00:19:09 完整请求
00:19:09 请求结束
00:19:09 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
00:19:09 path and query /api/todo/update {} {"id":"3","title":"678888"}
00:19:09 kwargs,  {'id': 3} <class 'dict'>
00:19:09 debug 2
00:19:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "678888",
  "completed": false,
  "ct": 1520698733,
  "ut": 1520698749
}
00:19:12 完整请求
00:19:12 请求结束
00:19:12 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
00:19:12 path and query /api/todo/update {} {"id":"3","title":"福州市地方郭德纲"}
00:19:12 kwargs,  {'id': 3} <class 'dict'>
00:19:12 debug 2
00:19:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "福州市地方郭德纲",
  "completed": false,
  "ct": 1520698733,
  "ut": 1520698752
}
00:24:39 完整请求
00:24:39 请求结束
00:24:39 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
00:24:39 path and query /todo/index {} 
00:24:39 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
00:24:39 完整请求
00:24:39 完整请求
00:24:39 请求结束
00:24:39 请求结束
00:24:39 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
00:24:39 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
00:24:39 path and query /static {'file': 'gua.js'} 
00:24:39 path and query /static {'file': 'todo.js'} 
00:24:39 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数 {当请求得到响应，就自动激发}
    r.onreadystatechange = function() {
        if(r.readyState === 4) {  //4表示服务器响应已完成
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response) //把服务器响应内容给了回调函数做实参，故形参也是一个{接收实参}
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API {向服务器发起请求的API}, 处理响应的回调函数写在todo.js里面
// 获取所有 todo
var apiTodoAll = function(callback) { //当本函数执行完，请求得到响应后，系统自动执行回调函数callback
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

00:24:39 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 把todoCell 插入 todo-list
    var todoList = e('.todo-list') //找到已有的todolist，把新按钮所在的div挂在.todo-list下
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) { //r接收实参{这个实参来自服务器的响应,其定义见gua.js中对回调函数输入的实参}
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() { //编写事件监听器
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) { //定义回调函数，并作为参数传入gua.js中定义的API中
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() { //和bindEventTodoAdd的逻辑刚刚相反
    var todoList = e('.todo-list') //当时add一个todo的div时，就是挂在.todo-list下,所以现在删也是要到.todo-list
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){ //事件监听委托给 爷爷节点 todoList
        var self = event.target //找到click动作的目标位置 {即要找到删除按钮}，因为这个按钮的父亲是todo{一个div},todo的父亲是todo-list{也是一个div}
        if(self.classList.contains('todo-delete')){ //找到删除按钮了
            // 删除这个 todo
            var todoCell = self.parentElement // 其实是要删除“删除按钮”所在的那个todo{即一个div}
            var todo_id = todoCell.dataset.id //但是add一个todo的div时，曾经自定义了一个data-id属性，现在从这个属性中取到当时add时存的值
            apiTodoDelete(todo_id, function(r){ //又去gua.js中调用ajax(),发送删除的HTTP请求到服务器
                log('删除成功', todo_id)
                todoCell.remove() //把这个todo从本地浏览器的静态页上删除掉
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){ // 又是把监听事件委托给了爷爷todolist
        var self = event.target
        if(self.classList.contains('todo-edit')){ //找到了"编辑按钮"
            var todoCell = self.parentElement //找到 "编辑按钮"的父亲{某一个todo,本质是一个div}
            insertEditForm(todoCell) //把一个用于编辑的div插入到todoCell最末尾{让其紧跟着这个待编辑的todo}
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list') // 又是委托{这个静态页面中恒存在的div}来监听事件
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target //当前被点击的对象
        if(self.classList.contains('todo-update')){ // 找到了“update按钮”
            log('点击了 update ')
            //
            var editForm = self.parentElement //拿到整个editForm
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input') //找到editForm中的input框
            var title = input.value
            // 用 closest 方法可以找到最近的直系祖先
            var todoCell = self.closest('.todo-cell') // 找到“update按钮”最近的一个class名为.todo-cell的祖先
            var todo_id = todoCell.dataset.id // 从这个to中拿到自定义data-id的值
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){ // 拿form去调用ajax()在服务器上更新上面那个todo,以及即将执行下面的回调函数
                log('更新成功', todo_id)
                var todo = JSON.parse(r) //解析apiTodoUpdate后得到的HTTP响应
                var selector = '#todo-' + todo.id //根据最开始{add todo} 时定义的id属性来
                var todoCell = e(selector)        //找需要更新的todo
                var titleSpan = todoCell.querySelector('.todo-title') //根据 这个todo的 {'.todo-title'的这个class属性}去找这个todo的一个子节点
                titleSpan.innerHTML = todo.title //更新titleSpan的内嵌的html内容，同理可以修改17行的${ut}
//                todoCell.remove()
            })
            editForm.remove()
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()


// 例如下图，待会儿在blog中逐个解释每一个CURD背后的逻辑和流程到底是怎样的？
// 可以很好地梳理清楚js和ajax的运行过程及效果

/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
00:24:39 完整请求
00:24:39 请求结束
00:24:39 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
00:24:39 path and query /api/todo/all {} 
00:24:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "123",
    "completed": false,
    "ct": 1520698725,
    "ut": 1520698725
  },
  {
    "id": 2,
    "title": "456",
    "completed": false,
    "ct": 1520698729,
    "ut": 1520698729
  },
  {
    "id": 3,
    "title": "福州市地方郭德纲",
    "completed": false,
    "ct": 1520698733,
    "ut": 1520698752
  }
]
00:24:45 完整请求
00:24:45 请求结束
00:24:45 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
00:24:45 path and query /api/todo/update {} {"id":"3","title":"的冯绍峰"}
00:24:45 kwargs,  {'id': 3} <class 'dict'>
00:24:45 debug 2
00:24:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "的冯绍峰",
  "completed": false,
  "ct": 1520698733,
  "ut": 1520699085
}
00:24:50 完整请求
00:24:50 请求结束
00:24:50 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
00:24:50 path and query /api/todo/update {} {"id":"3","title":"阿说三道四"}
00:24:51 kwargs,  {'id': 3} <class 'dict'>
00:24:51 debug 2
00:24:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "阿说三道四",
  "completed": false,
  "ct": 1520698733,
  "ut": 1520699091
}
00:24:55 完整请求
00:24:55 请求结束
00:24:55 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
00:24:55 path and query /api/todo/update {} {"id":"3","title":"阿萨德发的"}
00:24:55 kwargs,  {'id': 3} <class 'dict'>
00:24:55 debug 2
00:24:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "阿萨德发的",
  "completed": false,
  "ct": 1520698733,
  "ut": 1520699095
}
00:25:01 完整请求
00:25:01 请求结束
00:25:01 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
00:25:01 path and query /api/todo/update {} {"id":"3","title":"啊实打实"}
00:25:01 kwargs,  {'id': 3} <class 'dict'>
00:25:01 debug 2
00:25:01 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "啊实打实",
  "completed": false,
  "ct": 1520698733,
  "ut": 1520699101
}
00:25:24 完整请求
00:25:24 请求结束
13:57:20 完整请求
13:57:20 请求结束
13:57:20 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
13:57:20 path and query /todo/index {} 
13:57:20 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
13:57:20 完整请求
13:57:20 完整请求
13:57:20 请求结束
13:57:20 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
13:57:20 path and query /static {'file': 'gua.js'} 
13:57:20 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
13:57:20 path and query /static {'file': 'todo.js'} 
13:57:20 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 把todoCell 插入 todo-list
    var todoList = e('.todo-list') //找到已有的todolist，把新按钮所在的div挂在.todo-list下
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) { //r接收实参{这个实参来自服务器的响应,其定义见gua.js中对回调函数输入的实参}
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() { //编写事件监听器
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) { //定义回调函数，并作为参数传入gua.js中定义的API中
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() { //和bindEventTodoAdd的逻辑刚刚相反
    var todoList = e('.todo-list') //当时add一个todo的div时，就是挂在.todo-list下,所以现在删也是要到.todo-list
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){ //事件监听委托给 爷爷节点 todoList
        var self = event.target //找到click动作的目标位置 {即要找到删除按钮}，因为这个按钮的父亲是todo{一个div},todo的父亲是todo-list{也是一个div}
        if(self.classList.contains('todo-delete')){ //找到删除按钮了
            // 删除这个 todo
            var todoCell = self.parentElement // 其实是要删除“删除按钮”所在的那个todo{即一个div}
            var todo_id = todoCell.dataset.id //但是add一个todo的div时，曾经自定义了一个data-id属性，现在从这个属性中取到当时add时存的值
            apiTodoDelete(todo_id, function(r){ //又去gua.js中调用ajax(),发送删除的HTTP请求到服务器
                log('删除成功', todo_id)
                todoCell.remove() //把这个todo从本地浏览器的静态页上删除掉
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){ // 又是把监听事件委托给了爷爷todolist
        var self = event.target
        if(self.classList.contains('todo-edit')){ //找到了"编辑按钮"
            var todoCell = self.parentElement //找到 "编辑按钮"的父亲{某一个todo,本质是一个div}
            insertEditForm(todoCell) //把一个用于编辑的div插入到todoCell最末尾{让其紧跟着这个待编辑的todo}
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list') // 又是委托{这个静态页面中恒存在的div}来监听事件
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target //当前被点击的对象
        if(self.classList.contains('todo-update')){ // 找到了“update按钮”
            log('点击了 update ')
            //
            var editForm = self.parentElement //拿到整个editForm
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input') //找到editForm中的input框
            var title = input.value
            // 用 closest 方法可以找到最近的直系祖先
            var todoCell = self.closest('.todo-cell') // 找到“update按钮”最近的一个class名为.todo-cell的祖先
            var todo_id = todoCell.dataset.id // 从这个to中拿到自定义data-id的值
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){ // 拿form去调用ajax()在服务器上更新上面那个todo,以及即将执行下面的回调函数
                log('更新成功', todo_id)
                var todo = JSON.parse(r) //解析apiTodoUpdate后得到的HTTP响应
                var selector = '#todo-' + todo.id //根据最开始{add todo} 时定义的id属性来
                var todoCell = e(selector)        //找需要更新的todo
                var titleSpan = todoCell.querySelector('.todo-title') //根据 这个todo的 {'.todo-title'的这个class属性}去找这个todo的一个子节点
                titleSpan.innerHTML = todo.title //更新titleSpan的内嵌的html内容，同理可以修改17行的${ut}
            })
            // 如果上面的update成功，就把editForm这个div干掉
            editForm.remove()
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()


// 例如下图，待会儿在blog中逐个解释每一个CURD背后的逻辑和流程到底是怎样的？
// 可以很好地梳理清楚js和ajax的运行过程及效果

/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
13:57:20 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数 {当请求得到响应，就自动激发}
    r.onreadystatechange = function() {
        if(r.readyState === 4) {  //4表示服务器响应已完成
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response) //把服务器响应内容给了回调函数做实参，故形参也是一个{接收实参}
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API {向服务器发起请求的API}, 处理响应的回调函数写在todo.js里面
// 获取所有 todo
var apiTodoAll = function(callback) { //当本函数执行完，请求得到响应后，系统自动执行回调函数callback
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

13:57:21 完整请求
13:57:21 完整请求
13:57:21 请求结束
13:57:21 请求结束
13:57:21 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
13:57:21 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'user=dsd9dd4ffc8debgh']
13:57:21 path and query /api/todo/all {} 
13:57:21 path and query /favicon.ico {} 
13:57:21 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
13:57:21 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "123",
    "completed": false,
    "ct": 1520698725,
    "ut": 1520698725
  },
  {
    "id": 2,
    "title": "456",
    "completed": false,
    "ct": 1520698729,
    "ut": 1520698729
  },
  {
    "id": 3,
    "title": "啊实打实",
    "completed": false,
    "ct": 1520698733,
    "ut": 1520699101
  }
]
13:57:34 完整请求
13:57:34 请求结束
15:33:27 完整请求
15:33:27 请求结束
15:33:28 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoyfQ.DYpFUA.R1nY2pgJwD2-QvC1vKauUvvafaU']
15:33:28 path and query / {} 
15:33:28 响应
 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


15:33:28 完整请求
15:33:28 请求结束
15:33:28 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoyfQ.DYpFUA.R1nY2pgJwD2-QvC1vKauUvvafaU']
15:33:28 path and query /todo/index {} 
15:33:28 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:33:28 完整请求
15:33:28 完整请求
15:33:28 请求结束
15:33:28 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoyfQ.DYpFUA.R1nY2pgJwD2-QvC1vKauUvvafaU']
15:33:28 path and query /static {'file': 'todo.js'} 
15:33:28 path and query /static {'file': 'gua.js'} 
15:33:28 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数 {当请求得到响应，就自动激发}
    r.onreadystatechange = function() {
        if(r.readyState === 4) {  //4表示服务器响应已完成
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response) //把服务器响应内容给了回调函数做实参，故形参也是一个{接收实参}
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API {向服务器发起请求的API}, 处理响应的回调函数写在todo.js里面
// 获取所有 todo
var apiTodoAll = function(callback) { //当本函数执行完，请求得到响应后，系统自动执行回调函数callback
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

15:33:28 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 把todoCell 插入 todo-list
    var todoList = e('.todo-list') //找到已有的todolist，把新按钮所在的div挂在.todo-list下
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) { //r接收实参{这个实参来自服务器的响应,其定义见gua.js中对回调函数输入的实参}
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() { //编写事件监听器
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) { //定义回调函数，并作为参数传入gua.js中定义的API中
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() { //和bindEventTodoAdd的逻辑刚刚相反
    var todoList = e('.todo-list') //当时add一个todo的div时，就是挂在.todo-list下,所以现在删也是要到.todo-list
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){ //事件监听委托给 爷爷节点 todoList
        var self = event.target //找到click动作的目标位置 {即要找到删除按钮}，因为这个按钮的父亲是todo{一个div},todo的父亲是todo-list{也是一个div}
        if(self.classList.contains('todo-delete')){ //找到删除按钮了
            // 删除这个 todo
            var todoCell = self.parentElement // 其实是要删除“删除按钮”所在的那个todo{即一个div}
            var todo_id = todoCell.dataset.id //但是add一个todo的div时，曾经自定义了一个data-id属性，现在从这个属性中取到当时add时存的值
            apiTodoDelete(todo_id, function(r){ //又去gua.js中调用ajax(),发送删除的HTTP请求到服务器
                log('删除成功', todo_id)
                todoCell.remove() //把这个todo从本地浏览器的静态页上删除掉
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){ // 又是把监听事件委托给了爷爷todolist
        var self = event.target
        if(self.classList.contains('todo-edit')){ //找到了"编辑按钮"
            var todoCell = self.parentElement //找到 "编辑按钮"的父亲{某一个todo,本质是一个div}
            insertEditForm(todoCell) //把一个用于编辑的div插入到todoCell最末尾{让其紧跟着这个待编辑的todo}
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list') // 又是委托{这个静态页面中恒存在的div}来监听事件
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target //当前被点击的对象
        if(self.classList.contains('todo-update')){ // 找到了“update按钮”
            log('点击了 update ')
            //
            var editForm = self.parentElement //拿到整个editForm
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input') //找到editForm中的input框
            var title = input.value
            // 用 closest 方法可以找到最近的直系祖先
            var todoCell = self.closest('.todo-cell') // 找到“update按钮”最近的一个class名为.todo-cell的祖先
            var todo_id = todoCell.dataset.id // 从这个to中拿到自定义data-id的值
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){ // 拿form去调用ajax()在服务器上更新上面那个todo,以及即将执行下面的回调函数
                log('更新成功', todo_id)
                var todo = JSON.parse(r) //解析apiTodoUpdate后得到的HTTP响应
                var selector = '#todo-' + todo.id //根据最开始{add todo} 时定义的id属性来
                var todoCell = e(selector)        //找需要更新的todo
                var titleSpan = todoCell.querySelector('.todo-title') //根据 这个todo的 {'.todo-title'的这个class属性}去找这个todo的一个子节点
                titleSpan.innerHTML = todo.title //更新titleSpan的内嵌的html内容，同理可以修改17行的${ut}
            })
            // 如果上面的update成功，就把editForm这个div干掉
            editForm.remove()
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()


// 例如下图，待会儿在blog中逐个解释每一个CURD背后的逻辑和流程到底是怎样的？
// 可以很好地梳理清楚js和ajax的运行过程及效果

/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:33:28 完整请求
15:33:28 请求结束
15:33:28 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoyfQ.DYpFUA.R1nY2pgJwD2-QvC1vKauUvvafaU']
15:33:28 path and query /api/todo/all {} 
15:33:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "123",
    "completed": false,
    "ct": 1520698725,
    "ut": 1520698725
  },
  {
    "id": 2,
    "title": "456",
    "completed": false,
    "ct": 1520698729,
    "ut": 1520698729
  },
  {
    "id": 3,
    "title": "啊实打实",
    "completed": false,
    "ct": 1520698733,
    "ut": 1520699101
  }
]
15:33:32 完整请求
15:33:32 请求结束
15:33:32 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoyfQ.DYpFUA.R1nY2pgJwD2-QvC1vKauUvvafaU']
15:33:32 path and query /api/todo/add {} {"title":"123"}
15:33:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "title": "123",
  "completed": false,
  "ct": 1521012812,
  "ut": 1521012812
}
15:33:35 完整请求
15:33:36 请求结束
15:33:36 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoyfQ.DYpFUA.R1nY2pgJwD2-QvC1vKauUvvafaU']
15:33:36 path and query /api/todo/add {} {"title":"456"}
15:33:36 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "title": "456",
  "completed": false,
  "ct": 1521012816,
  "ut": 1521012816
}
15:35:40 完整请求
15:35:40 请求结束
15:35:40 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoyfQ.DYpFUA.R1nY2pgJwD2-QvC1vKauUvvafaU']
15:35:40 path and query /api/todo/update {} {"id":"1","title":"1233333"}
15:35:40 kwargs,  {'id': 1} <class 'dict'>
15:35:40 debug 0
15:35:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "1233333",
  "completed": false,
  "ct": 1520698725,
  "ut": 1521012940
}
15:35:53 完整请求
15:35:53 请求结束
15:35:53 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoyfQ.DYpFUA.R1nY2pgJwD2-QvC1vKauUvvafaU']
15:35:53 path and query /api/todo/update {} {"id":"4","title":"321"}
15:35:53 kwargs,  {'id': 4} <class 'dict'>
15:35:53 debug 3
15:35:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "title": "321",
  "completed": false,
  "ct": 1521012812,
  "ut": 1521012953
}
15:37:21 完整请求
15:37:21 请求结束
15:37:21 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoyfQ.DYpFUA.R1nY2pgJwD2-QvC1vKauUvvafaU']
15:37:21 path and query /todo/index {} 
15:37:21 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:37:21 完整请求
15:37:21 完整请求
15:37:21 请求结束
15:37:21 请求结束
15:37:22 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoyfQ.DYpFUA.R1nY2pgJwD2-QvC1vKauUvvafaU']
15:37:22 path and query /static {'file': 'gua.js'} 
15:37:22 path and query /static {'file': 'todo.js'} 
15:37:22 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数 {当请求得到响应，就自动激发}
    r.onreadystatechange = function() {
        if(r.readyState === 4) {  //4表示服务器响应已完成
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response) //把服务器响应内容给了回调函数做实参，故形参也是一个{接收实参}
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API {向服务器发起请求的API}, 处理响应的回调函数写在todo.js里面
// 获取所有 todo
var apiTodoAll = function(callback) { //当本函数执行完，请求得到响应后，系统自动执行回调函数callback
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

 //编写事件监听器
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) { //定义回调函数，并作为参数传入gua.js中定义的API中
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() { //和bindEventTodoAdd的逻辑刚刚相反
    var todoList = e('.todo-list') //当时add一个todo的div时，就是挂在.todo-list下,所以现在删也是要到.todo-list
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){ //事件监听委托给 爷爷节点 todoList
        var self = event.target //找到click动作的目标位置 {即要找到删除按钮}，因为这个按钮的父亲是todo{一个div},todo的父亲是todo-list{也是一个div}
        if(self.classList.contains('todo-delete')){ //找到删除按钮了
            // 删除这个 todo
            var todoCell = self.parentElement // 其实是要删除“删除按钮”所在的那个todo{即一个div}
            var todo_id = todoCell.dataset.id //但是add一个todo的div时，曾经自定义了一个data-id属性，现在从这个属性中取到当时add时存的值
            apiTodoDelete(todo_id, function(r){ //又去gua.js中调用ajax(),发送删除的HTTP请求到服务器
                log('删除成功', todo_id)
                todoCell.remove() //把这个todo从本地浏览器的静态页上删除掉
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){ // 又是把监听事件委托给了爷爷todolist
        var self = event.target
        if(self.classList.contains('todo-edit')){ //找到了"编辑按钮"
            var todoCell = self.parentElement //找到 "编辑按钮"的父亲{某一个todo,本质是一个div}
            insertEditForm(todoCell) //把一个用于编辑的div插入到todoCell最末尾{让其紧跟着这个待编辑的todo}
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list') // 又是委托{这个静态页面中恒存在的div}来监听事件
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target //当前被点击的对象
        if(self.classList.contains('todo-update')){ // 找到了“update按钮”
            log('点击了 update ')
            //
            var editForm = self.parentElement //拿到整个editForm
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input') //找到editForm中的input框
            var title = input.value
            // 用 closest 方法可以找到最近的直系祖先
            var todoCell = self.closest('.todo-cell') // 找到“update按钮”最近的一个class名为.todo-cell的祖先
            var todo_id = todoCell.dataset.id // 从这个to中拿到自定义data-id的值
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){ // 拿form去调用ajax()在服务器上更新上面那个todo,以及即将执行下面的回调函数
                log('更新成功', todo_id)
                var todo = JSON.parse(r) //解析apiTodoUpdate后得到的HTTP响应
                var selector = '#todo-' + todo.id //根据最开始{add todo} 时定义的id属性来
                var todoCell = e(selector)        //找需要更新的todo
                var titleSpan = todoCell.querySelector('.todo-title') //根据 这个todo的 {'.todo-title'的这个class属性}去找这个todo的一个子节点
                titleSpan.innerHTML = todo.title //更新titleSpan的内嵌的html内容，同理可以修改17行的${ut}
            })
            // 如果上面的update成功，就把editForm这个div干掉
            editForm.remove()
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()


// 例如下图，待会儿在blog中逐个解释每一个CURD背后的逻辑和流程到底是怎样的？
// 可以很好地梳理清楚js和ajax的运行过程及效果

/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:37:22 完整请求
15:37:22 请求结束
15:37:22 cookie ['Pycharm-dc9a3628=c0df1600-3e31-44d7-bd67-ce36c03445ce', 'session=eyJfcGVybWFuZW50Ijp0cnVlLCJ1c2VyX2lkIjoyfQ.DYpFUA.R1nY2pgJwD2-QvC1vKauUvvafaU']
15:37:22 path and query /api/todo/all {} 
15:37:22 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "1233333",
    "completed": false,
    "ct": 1520698725,
    "ut": 1521012940
  },
  {
    "id": 2,
    "title": "456",
    "completed": false,
    "ct": 1520698729,
    "ut": 1520698729
  },
  {
    "id": 3,
    "title": "啊实打实",
    "completed": false,
    "ct": 1520698733,
    "ut": 1520699101
  },
  {
    "id": 4,
    "title": "321",
    "completed": false,
    "ct": 1521012812,
    "ut": 1521012953
  },
  {
    "id": 5,
    "title": "456",
    "completed": false,
    "ct": 1521012816,
    "ut": 1521012816
  }
]
